from github import Github
import httpx
request = httpx.Client(http2=True)
from assets.controller import *
from assets.functions import * 

  
def searchPoCExploitOnlyWithGithub(keyword):
    
    g = Github(GITHUB_TOKEN_READ_ONLY_PUBLIC_REPOSITORY)
    query = ''+keyword+'+in:readme+in:description'
    result = g.search_repositories(query, 'stars', 'desc',)
 
    if result.totalCount < 1 : 
        return "No exploit has been published on github at this moment."
    
    exploits = "Best Poc exploit from Github : \n"#+str(result.totalCount)+"repo(s) found"
    
    i = 0
    for repo in result:
        exploits += "üîó <a href='"+repo.clone_url+"'>Link</a> - "+str(repo.stargazers_count)+"‚≠ê - üóì : "+str(repo.updated_at)+"\n"
        i = i + 1 
        if i > 10 :
            exploits += "\n‚ö†Ô∏è <i>Some times github can return false positive.</i>"
            return exploits
    exploits += "\n‚ö†Ô∏è <i>Some times github can return false positive.</i>"
    return exploits

    
def searchPoCExploitWithSploitus(cve) : 

    headers = {
    'Referer': 'https://sploitus.com/'}

    params={"type":"exploits","sort":"default","query":cve,"title":"true","offset":0}
    response = request.post('https://sploitus.com/search', json=params, headers=headers)
    data = response.json()
    
    if data['exploits_total'] < 1 : 
        return "Unfortunately, 0 PoC exploit has been found."

    exploits = "Best Poc exploit from sploitus browser : \n"#+str(result.totalCount)+"repo(s) found"

    for exploit in data['exploits']:
        if len(exploit['href']) == 0 :
            return "‚ùåüîó Broken PoC Link üòî"
        exploits += "üîó<a href='"+exploit['href']+"'>Link </a> üóì : "+ exploit['published']+"\n\n"
    exploits += "‚ö†Ô∏è <i>Some times sploitus can return false positive.</i>"
    return exploits

